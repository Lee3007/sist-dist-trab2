// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Itinerary {
  id             Int    @id @default(autoincrement())
  destination    String
  embarkPort     String
  disembarkPort  String
  visitedPlaces  String // Pode ser separado por vírgula ou em outra tabela, se quiser normalizar
  numberOfNights Int
  pricePerPerson Float
  shipName       String

  trips Trip[] // Datas de embarque disponíveis
}

model Trip {
  id            Int      @id @default(autoincrement())
  itineraryId   Int
  departureDate DateTime
  discount      Float    @default(0)

  itinerary Itinerary @relation(fields: [itineraryId], references: [id])
  bookings  Booking[] // Relacionamento com reservas
}

model Booking {
  id            Int           @id @default(autoincrement())
  tripId        Int
  numPassengers Int
  numCabins     Int
  paymentLink   String
  status        BookingStatus @default(PENDING) // status da reserva
  createdAt     DateTime      @default(now())

  trip Trip @relation(fields: [tripId], references: [id])
}

enum BookingStatus {
  PENDING // Aguardando pagamento
  APPROVED // Pagamento aprovado
  REJECTED // Pagamento recusado
  TICKET_ISSUED // Bilhete gerado
}
